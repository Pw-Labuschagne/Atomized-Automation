#include "A_A.h"


/* ScreenWidth - Width of the rendered window;
 * Screenheight - Height of the rendered window;
 * We use const to keep the values the same throughout the process.
 */
const int ScreenWidth = 640;
const int ScreenHeight = 480;

/*GameProcesses - Will be used to handle all of the processes of the game,
 * 		  we made a seperate function so our main doesn't get to cluttered.
 * window: The created window in the main function.
 * Return: Int value for the running/completion of the game process.
 */
int GameProcesses(SDL_Window *window)
{


}

/*GameRender - Will be used for the rendering part of tne game.
 * renderer: Passed by the main once created
 *Return: nothing
 */
void GameRender(SDL_Renderer *renderer)
{


}

/*main - The main controlling of the game
 */
int main(int argc, char *argv[])
{

	int done = 0;

	if (SDL_Init(SDL_INIT_VIDEO) != 0)
	{
		printf("SDL could not initialize! SDL_ERROR: %s\n", SDL_GetError());
		return(1);
	}
	
	printf("Initialization sucessfull. Window creation now in progress\n");
	SDL_Window* window = SDL_CreateWindow("Atomized Automation",
		   	SDL_WINDOWPOS_CENTERED,
		   	SDL_WINDOWPOS_CENTERED,
		   	ScreenWidth,
		   	ScreenHeight,
		   	0);
	if (!window)
	{
		printf("Window could not be created! SDL_ERROR: %s\n", SDL_GetError());
		SDL_Quit;
		return(1);
	}
	
	/*Set flags for the renderer*/
	Uint32 render_flags = SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC;
	
	SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, render_flags);
	if (!renderer)
	{
		printf("Could not render! SDL_ERROR: %s\n", SDL_GetError);
		SDL_DestroyWindow(window);
		SDL_Quit;
		return(1);
	}

	SDL_Surface* surface = IMG_Load("Polygon Brothers LOGO 1280(1).png");
	if (!surface)
	{
		printf("Could not load image! SDL_ERROR: %s\n", SDL_GetError);
		SDL_DestroyWindow(window);
		SDL_DestroyRenderer(renderer);
		SDL_Quit;
		return(1);
	}

	SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, surface);
	SDL_FreeSurface(surface);
	if (!texture)
	{
		printf("Could not create texture! SDL_ERROR: %s\n", SDL_GetError);
		SDL_DestroyWindow(window);
		SDL_DestroyRenderer(renderer);
		SDL_Quit;
		return(1);
	}

	SDL_RenderClear(renderer);

	SDL_RenderCopy(renderer, texture, NULL, NULL);
	SDL_RenderPresent(renderer);

	SDL_Delay(5000);

	SDL_DestroyWindow(window);
	SDL_Quit();

	return(0);

}

